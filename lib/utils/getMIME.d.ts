import { ValueOfObject } from '@/types';
declare const FileTypeInfo: {
    readonly bmp: "image/bmp";
    readonly gif: "image/gif";
    readonly jpeg: "image/jpeg";
    readonly jpg: "image/jpeg";
    readonly png: "image/jpeg";
    readonly webp: "image/webp";
    readonly html: "text/html";
    readonly txt: "text/plain";
    readonly vsd: "application/vnd.visio";
    readonly ppt: "application/vnd.ms-powerpoint";
    readonly pptx: "application/vnd.ms-powerpoint";
    readonly doc: "application/msword";
    readonly docx: "application/msword";
    readonly xls: "application/x-xls";
    readonly xlsx: "application/x-xls";
    readonly pdf: "application/pdf";
    readonly zip: "application/x-zip-compressed";
    readonly rar: "application/octet-stream";
    readonly xml: "text/xml";
    readonly mp3: "audio/mpeg";
    readonly m4a: "audio/mpeg";
    readonly mp4: "video/mpeg4";
};
type FileTypeMapping = ValueOfObject<typeof FileTypeInfo>;
type FileType = keyof typeof FileTypeInfo;
type ReturnTypeValue<T extends FileType> = FileTypeMapping[T];
declare const _default: <T extends "bmp" | "gif" | "jpeg" | "jpg" | "png" | "webp" | "html" | "txt" | "vsd" | "ppt" | "pptx" | "doc" | "docx" | "xls" | "xlsx" | "pdf" | "zip" | "rar" | "xml" | "mp3" | "m4a" | "mp4">(fileExtension: T) => ReturnTypeValue<T>;
export default _default;
